from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import os
import time

# Configura√ß√µes
EMAIL = os.getenv("INSTA_EMAIL")
SENHA = os.getenv("INSTA_PASSWORD")
PERFIL_BUSCAR = "lucaascf"

# Pasta para salvar perfil/cookies
PROFILE_PATH = os.path.join(os.getcwd(), "insta_profile")

# Chrome com perfil salvo (cookies/sess√£o)
options = Options()
options.add_argument(f"--user-data-dir={PROFILE_PATH}")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-notifications")

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

def fazer_login():
    """Login apenas se necess√°rio"""
    try:
        # Verifica se j√° est√° logado procurando por elementos da p√°gina principal
        time.sleep(3)
        if "login" not in driver.current_url.lower():
            print("‚úÖ J√° estava logado!")
            return True
        
        # Se chegou aqui, precisa fazer login
        print("üîë Fazendo login...")
        driver.find_element(By.NAME, "username").send_keys(EMAIL)
        driver.find_element(By.NAME, "password").send_keys(SENHA)
        driver.find_element(By.XPATH, "//button[@type='submit']").click()
        
        time.sleep(5)
        print("‚úÖ Login realizado!")
        return True
        
    except:
        # Se n√£o encontrou campos de login, provavelmente j√° est√° logado
        print("‚úÖ Sess√£o mantida!")
        return True

def remover_popups():
    """Remove popups b√°sicos"""
    try:
        time.sleep(2)
        driver.find_element(By.XPATH, "//button[contains(text(), 'Agora n√£o') or contains(text(), 'Not Now')]").click()
        print("üö´ Popup removido")
    except:
        pass

def buscar_perfil(usuario):
    """Busca perfil via search"""
    print(f"üîç Iniciando busca por @{usuario}")
    
    try:
        print("üîç Tentando atalho de teclado '/' para abrir busca...")
        
        # M√©todo 1: Tecla de atalho "/" para abrir busca
        from selenium.webdriver.common.action_chains import ActionChains
        actions = ActionChains(driver)
        actions.send_keys("/").perform()
        time.sleep(2)
        
        print("üîç Procurando caixa de busca ap√≥s atalho...")
        search_box = None
        
        # Tenta encontrar a caixa de busca
        search_box_selectors = [
            "//input[@placeholder='Search' or @placeholder='Buscar']",
            "//input[@aria-label='Search input' or @aria-label='Entrada de pesquisa']",
            "//input[@type='text']",
            "//input[contains(@class, 'search')]",
        ]
        
        for selector in search_box_selectors:
            try:
                search_box = driver.find_element(By.XPATH, selector)
                print("‚úÖ Caixa de busca encontrada com atalho!")
                break
            except:
                continue
        
        # Se o atalho n√£o funcionou, vai direto para URL de busca
        if not search_box:
            print("‚ùå Atalho n√£o funcionou, indo direto para p√°gina de busca...")
            driver.get("https://www.instagram.com/explore/search/")
            time.sleep(3)
            
            # Tenta novamente encontrar a caixa
            for selector in search_box_selectors:
                try:
                    search_box = driver.find_element(By.XPATH, selector)
                    print("‚úÖ Caixa de busca encontrada na p√°gina de busca!")
                    break
                except:
                    continue
        
        if not search_box:
            print("‚ùå N√£o conseguiu encontrar caixa de busca!")
            return False
            
        # Limpa e digita o usu√°rio
        search_box.clear()
        search_box.send_keys(usuario)
        print(f"‚úÖ Digitou: {usuario}")
        time.sleep(2)
        
        # Pressiona Enter
        search_box.send_keys(Keys.RETURN)
        print("‚úÖ Pressionou Enter")
        time.sleep(4)
        
        print("üîç Procurando resultado do perfil...")
        
        # M√∫ltiplos seletores para encontrar o perfil
        profile_selectors = [
            f"//a[contains(@href, '/{usuario}/')]",
            f"//div[contains(text(), '{usuario}')]//ancestor::a",
            f"//span[contains(text(), '@{usuario}')]//ancestor::a",
            f"//span[contains(text(), '{usuario}')]//ancestor::a",
        ]
        
        profile_found = False
        for selector in profile_selectors:
            try:
                profile_link = driver.find_element(By.XPATH, selector)
                profile_link.click()
                print(f"‚úÖ Clicou no perfil @{usuario}")
                time.sleep(3)
                profile_found = True
                break
            except:
                continue
        
        if not profile_found:
            print(f"‚ùå Perfil @{usuario} n√£o encontrado nos resultados!")
            return False
        
        print(f"üéâ SUCESSO! Perfil @{usuario} acessado via busca!")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na busca: {str(e)}")
        print(f"‚ùå Tipo do erro: {type(e).__name__}")
        return False

# EXECU√á√ÉO PRINCIPAL
try:
    print("üåê Abrindo Instagram...")
    driver.get("https://www.instagram.com/")
    
    # Login
    fazer_login()
    
    # Remove popups
    remover_popups()
    
    # Busca perfil
    print("üîç TENTANDO BUSCA NATIVA PRIMEIRO...")
    busca_sucesso = buscar_perfil(PERFIL_BUSCAR)
    
    if busca_sucesso:
        print("üéâ Sucesso via busca nativa!")
    else:
        print("‚ùå Busca nativa falhou!")
        print("üîÑ Tentando URL direta...")
        driver.get(f"https://www.instagram.com/{PERFIL_BUSCAR}/")
        time.sleep(3)
        print("‚úÖ Perfil acessado via URL!")
    
    print(f"üìç URL: {driver.current_url}")
    print("‚è∏Ô∏è Enter para fechar...")
    input()

except Exception as e:
    print(f"‚ùå Erro: {e}")
    print("‚è∏Ô∏è Enter para fechar...")
    input()

finally:
    driver.quit()